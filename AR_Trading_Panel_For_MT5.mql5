//+------------------------------------------------------------------+
//|                                               ControlsButton.mq5 |
//|                        Copyright 2017, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2017, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property description "Control Panels and Dialogs. Demonstration class CButton"

#include <Trade/Trade.mqh>
#include <Controls\Dialog.mqh>
#include <Controls\Button.mqh>
#include <Controls\Edit.mqh>
#include <Controls\Label.mqh>

double ask;
double bid;

double tpBuy;
double tpSell;

double slSell;
double slBuy;

input string posLotsDef = 0.1; // Lot size
input string slPipsDef = 100; // Stoploss in pips
input string RiskToRewardDef = 2; // Risk to Reward Ratio

double posLots; // Lot size
double slPips; // Stoploss in pips
double RiskToReward; // Risk to Reward Ratio


//+------------------------------------------------------------------+
//| defines                                                          |
//+------------------------------------------------------------------+
//--- indents and gaps
#define INDENT_LEFT                         (11)      // indent from left (with allowance for border width)
#define INDENT_TOP                          (11)      // indent from top (with allowance for border width)
#define INDENT_RIGHT                        (11)      // indent from right (with allowance for border width)
#define INDENT_BOTTOM                       (11)      // indent from bottom (with allowance for border width)
#define CONTROLS_GAP_X                      (5)       // gap by X coordinate
#define CONTROLS_GAP_Y                      (5)       // gap by Y coordinate
//--- for buttons
#define BUTTON_WIDTH                        (100)     // size by X coordinate
#define BUTTON_HEIGHT                       (20)      // size by Y coordinate
//--- for the indication area
#define EDIT_HEIGHT                         (20)      // size by Y coordinate
#define EDIT_WIDTH                          (70)      // size by Y coordinate
//--- for group controls
#define GROUP_WIDTH                         (150)     // size by X coordinate
#define LIST_HEIGHT                         (179)     // size by Y coordinate
#define RADIO_HEIGHT                        (56)      // size by Y coordinate
#define CHECK_HEIGHT                        (93)      // size by Y coordinate
//+------------------------------------------------------------------+
//| Class CControlsDialog                                            |
//| Usage: main dialog of the Controls application                   |
//+------------------------------------------------------------------+
class CControlsDialog : public CAppDialog
  {
private:
    // Labels
   CLabel            m_LotsLbl;                       // Label for Lots
   CLabel            m_SlPipsLbl;                     // Label for Lots
   CLabel            m_RiskToRewardRatioLbl;          // Label for Risk to Reward Ratio
   CLabel            m_RiskLbl;                       // Label for Risk percentage      
     // Edits
   CEdit             m_LotsEdit;                      // Edit field for the lots  
   CEdit             m_SlPipsEdit;                    // Edit field for the sl pips  
   CEdit             m_RiskToRewardRatioEdit;         // Edit field for Risk to Reward Ratio
   CEdit             m_RiskEdit;                      // Edit field for Risk percentage
   
   // Buttons
   CButton           m_SellBtn;                       // button to sell
   CButton           m_BuyBtn;                        // button to buy
   CButton           m_CloseAllBtn;                   // button to close all positions
   CButton           m_CalculateRiskBtn;              // button to calculate lot size based on % of deposit to risk   
   CButton           m_ClearInputsBtn;                // button to clear the input fields
   CButton           m_BreakEvenBtn;                  // button to break even all traded on the current chart
   CButton           m_MarketPendingBtn;              // Button to toggle between market and pending orders
   

public:
                     CControlsDialog(void);
                    ~CControlsDialog(void);
   //--- create
   virtual bool      Create(const long chart,const string name,const int subwin,const int x1,const int y1,const int x2,const int y2);
   //--- chart event handler
   virtual bool      OnEvent(const int id,const long &lparam,const double &dparam,const string &sparam);
 
protected:
   //--- create dependent controls
   bool              CreateSellBtn(void);
   bool              CreateBuyBtn(void);
   bool              CreateCloseAllBtn(void);
   bool              CreateCalculateRiskBtn(void);
   bool              CreateClearInputsBtn(void);
   bool              CreateBreakEvenBtn(void);
   bool              CreateMarketPendingBtn(void);
   
   bool              CreateLotsEdit(void);
   bool              CreateSlPipsEdit(void);
   bool              CreateRiskToRewardRatioEdit(void);
   bool              CreateRiskEdit(void);
   
   bool              CreateLotsLbl(void);
   bool              CreateSlPipsLbl(void);
   bool              CreateRiskToRewardRatioLbl(void);
   bool              CreateRiskLbl(void);
   
   //--- handlers of the dependent controls events
   void              OnClickSellBtn(void);
   void              OnClickBuyBtn(void);
   void              OnClickCloseAllBtn(void);
   void              OnClickCalculateRiskBtn(void);
   void              OnClickClearInputsBtn(void);
   void              OnClickBreakEvenBtn(void);
   void              OnClickMarketPendingBtn(void);
  };
//+------------------------------------------------------------------+
//| Event Handling                                                   |
//+------------------------------------------------------------------+
EVENT_MAP_BEGIN(CControlsDialog)
ON_EVENT(ON_CLICK,m_SellBtn,OnClickSellBtn)
ON_EVENT(ON_CLICK,m_BuyBtn,OnClickBuyBtn)
ON_EVENT(ON_CLICK,m_CloseAllBtn,OnClickCloseAllBtn)
ON_EVENT(ON_CLICK,m_CalculateRiskBtn,OnClickCalculateRiskBtn)
ON_EVENT(ON_CLICK,m_ClearInputsBtn,OnClickClearInputsBtn)
ON_EVENT(ON_CLICK,m_BreakEvenBtn,OnClickBreakEvenBtn)
ON_EVENT(ON_CLICK,m_MarketPendingBtn,OnClickMarketPendingBtn)
EVENT_MAP_END(CAppDialog)
//+------------------------------------------------------------------+
//| Constructor                                                      |
//+------------------------------------------------------------------+
CControlsDialog::CControlsDialog(void)
  {
  }
//+------------------------------------------------------------------+
//| Destructor                                                       |
//+------------------------------------------------------------------+
CControlsDialog::~CControlsDialog(void)
  {
  }
//+------------------------------------------------------------------+
//| Create                                                           |
//+------------------------------------------------------------------+
bool CControlsDialog::Create(const long chart,const string name,const int subwin,const int x1,const int y1,const int x2,const int y2)
  {
   if(!CAppDialog::Create(chart,name,subwin,x1,y1,x2,y2))
      return(false);
//--- create dependent controls
   if(!CreateLotsLbl())
      return(false);
   if(!CreateSlPipsLbl())
      return(false);
   if(!CreateRiskToRewardRatioLbl())
      return(false);
   if(!CreateRiskLbl())
      return(false);     
   if(!CreateLotsEdit())   
      return(false);      
   if(!CreateSlPipsEdit())   
      return(false);      
   if(!CreateRiskToRewardRatioEdit())   
      return(false);      
   if(!CreateRiskEdit())   
      return(false);   
   if(!CreateSellBtn())
      return(false);
   if(!CreateBuyBtn())
      return(false);
   if(!CreateCloseAllBtn())
      return(false);      
   if(!CreateCalculateRiskBtn())
      return(false);      
   if(!CreateClearInputsBtn())
      return(false);
   if(!CreateBreakEvenBtn())
      return(false);      
   if(!CreateMarketPendingBtn())
      return(false);        
//--- succeed
   return(true);
  }
  

// Creating Labels =====================================================================================================


//+------------------------------------------------------------------+
//| Create the Lots Label                  #1                        |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateLotsLbl(void)
  {
//--- coordinates
   int x1=INDENT_LEFT;
   int y1=INDENT_TOP+CONTROLS_GAP_Y;
   int x2=x1+EDIT_WIDTH;
   int y2=y1+EDIT_HEIGHT;   
//--- create
   if(!m_LotsLbl.Create(m_chart_id,m_name+"LotsLbl",m_subwin,x1,y1,x2,y2))      
      return(false);
   if(!m_LotsLbl.Text("Lots"))
      return(false);
   if(!Add(m_LotsLbl))
      return(false);
//--- succeed
   return(true);
  }
 
 
//+------------------------------------------------------------------+
//| Create the SlPips label             #2                           |  
//+------------------------------------------------------------------+
bool CControlsDialog::CreateSlPipsLbl(void)
  {
//--- coordinates
   int x1=INDENT_LEFT+EDIT_WIDTH+CONTROLS_GAP_X;
   int y1=INDENT_TOP+CONTROLS_GAP_Y;
   int x2=x1+EDIT_WIDTH;
   int y2=y1+EDIT_HEIGHT;
      
//--- create
   if(!m_SlPipsLbl.Create(m_chart_id,m_name+"SlPipsLbl",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_SlPipsLbl.Text("SL"))
      return(false);
   if(!Add(m_SlPipsLbl))
      return(false);    
//--- succeed
   return(true);
  }


//+------------------------------------------------------------------+
//| Create the risk to reward ratio Label              #3            |  
//+------------------------------------------------------------------+
bool CControlsDialog::CreateRiskToRewardRatioLbl(void)
  {
//--- coordinates

   int x1=INDENT_LEFT+2*(EDIT_WIDTH+CONTROLS_GAP_X);
   int y1=INDENT_TOP+CONTROLS_GAP_Y;
   int x2=x1+EDIT_WIDTH;
   int y2=y1+EDIT_HEIGHT;
  
//--- create
   if(!m_RiskToRewardRatioLbl.Create(m_chart_id,m_name+"RRRLbl",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_RiskToRewardRatioLbl.Text("RRR"))
      return(false);
   if(!Add(m_RiskToRewardRatioLbl))
      return(false);    
//--- succeed
   return(true);
  }



//+------------------------------------------------------------------+
//| Create the Risk label                   #4                       |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateRiskLbl(void)
  {
//--- coordinates
   int x1=INDENT_LEFT+3*(EDIT_WIDTH+CONTROLS_GAP_X);
   int y1=INDENT_TOP+CONTROLS_GAP_Y;
   int x2=x1+EDIT_WIDTH;
   int y2=y1+EDIT_HEIGHT;
//--- create
   if(!m_RiskLbl.Create(m_chart_id,m_name+"RiskLbl",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_RiskLbl.Text("Risk %"))
      return(false);
   if(!Add(m_RiskLbl))
      return(false);    
//--- succeed
   return(true);
  }


// Creating Edit Fields =====================================================================================================

//+------------------------------------------------------------------+
//| Create the Lots field                  #1                        |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateLotsEdit(void)
  {
//--- coordinates
   int x1=INDENT_LEFT;
   int y1=INDENT_TOP+EDIT_HEIGHT+CONTROLS_GAP_Y;
   int x2=x1+EDIT_WIDTH;
   int y2=y1+EDIT_HEIGHT;   
//--- create
   if(!m_LotsEdit.Create(m_chart_id,m_name+"Lots",m_subwin,x1,y1,x2,y2))      
      return(false);
//--- allow editing the content
   if(!m_LotsEdit.ReadOnly(false))
      return(false);
   if(!Add(m_LotsEdit))
      return(false);
//--- Assign default value from the inputs
   if(!m_LotsEdit.Text(posLotsDef))
      return(false);
//--- succeed
   return(true);
  }
 
//+------------------------------------------------------------------+
//| Create the SlPips field             #2                           |  
//+------------------------------------------------------------------+
bool CControlsDialog::CreateSlPipsEdit(void)
  {
//--- coordinates
   int x1=INDENT_LEFT+EDIT_WIDTH+CONTROLS_GAP_X;
   int y1=INDENT_TOP+EDIT_HEIGHT+CONTROLS_GAP_Y;
   int x2=x1+EDIT_WIDTH;
   int y2=y1+EDIT_HEIGHT;
      
//--- create
   if(!m_SlPipsEdit.Create(m_chart_id,m_name+"SlPips",m_subwin,x1,y1,x2,y2))
      return(false);
//--- allow editing the content
   if(!m_SlPipsEdit.ReadOnly(false))
      return(false);
   if(!Add(m_SlPipsEdit))
      return(false);
//--- Assign default value from the inputs
   if(!m_SlPipsEdit.Text(slPipsDef))
      return(false);  
//--- succeed
   return(true);
  }

//+------------------------------------------------------------------+
//| Create the Risk to reward ratio edit field          #3           |  
//+------------------------------------------------------------------+
bool CControlsDialog::CreateRiskToRewardRatioEdit(void)
  {
//--- coordinates

   int x1=INDENT_LEFT+2*(EDIT_WIDTH+CONTROLS_GAP_X);
   int y1=INDENT_TOP+EDIT_HEIGHT+CONTROLS_GAP_Y;
   int x2=x1+EDIT_WIDTH;
   int y2=y1+EDIT_HEIGHT;
  
//--- create
   if(!m_RiskToRewardRatioEdit.Create(m_chart_id,m_name+"RRR",m_subwin,x1,y1,x2,y2))
      return(false);
//--- allow editing the content
   if(!m_RiskToRewardRatioEdit.ReadOnly(false))
      return(false);
   if(!Add(m_RiskToRewardRatioEdit))
      return(false);
//--- Assign default value from the inputs
   if(!m_RiskToRewardRatioEdit.Text(RiskToRewardDef))
      return(false);         
//--- succeed
   return(true);
  }


//+------------------------------------------------------------------+
//| Create the Risk Edit field              #4                       |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateRiskEdit(void)
  {
//--- coordinates
   int x1=INDENT_LEFT+3*(EDIT_WIDTH+CONTROLS_GAP_X);
   int y1=INDENT_TOP+EDIT_HEIGHT+CONTROLS_GAP_Y;
   int x2=x1+EDIT_WIDTH;
   int y2=y1+EDIT_HEIGHT;
//--- create
   if(!m_RiskEdit.Create(m_chart_id,m_name+"Risk",m_subwin,x1,y1,x2,y2))
      return(false);
//--- allow editing the content
   if(!m_RiskEdit.ReadOnly(false))
      return(false);
   if(!Add(m_RiskEdit))
      return(false);    
//--- succeed
   return(true);
  }

// Creating Buttons =====================================================================================================

//+------------------------------------------------------------------+
//| Create the "SellBtn" button                                      |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateSellBtn(void)
  {
//--- coordinates
   int x1=INDENT_LEFT;
   int y1=INDENT_TOP+3*(EDIT_HEIGHT+CONTROLS_GAP_Y);
   int x2=x1+BUTTON_WIDTH;
   int y2=y1+BUTTON_HEIGHT;
//--- create
   if(!m_SellBtn.Create(m_chart_id,m_name+"SellBtn",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_SellBtn.Text("SELL"))
      return(false);
   if(!Add(m_SellBtn))
      return(false);
//--- succeed
   return(true);
  }
//+------------------------------------------------------------------+
//| Create the "BuyBtn" button                                      |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateBuyBtn(void)
  {
//--- coordinates
   int x1=INDENT_LEFT+(BUTTON_WIDTH+CONTROLS_GAP_X);
   int y1=INDENT_TOP+3*(EDIT_HEIGHT+CONTROLS_GAP_Y);
   int x2=x1+BUTTON_WIDTH;
   int y2=y1+BUTTON_HEIGHT;
//--- create
   if(!m_BuyBtn.Create(m_chart_id,m_name+"BuyBtn",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_BuyBtn.Text("BUY"))
      return(false);
   if(!Add(m_BuyBtn))
      return(false);
//--- succeed
   return(true);
  }
//+------------------------------------------------------------------+
//| Create the "CloseAllBtn"   button                                |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateCloseAllBtn(void)
  {
//--- coordinates
   int x1=INDENT_LEFT+2*(BUTTON_WIDTH+CONTROLS_GAP_X);
   int y1=INDENT_TOP+3*(EDIT_HEIGHT+CONTROLS_GAP_Y);
   int x2=x1+BUTTON_WIDTH;
   int y2=y1+BUTTON_HEIGHT;
//--- create
   if(!m_CloseAllBtn.Create(m_chart_id,m_name+"CloseAllBtn",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_CloseAllBtn.Text("Close All"))
      return(false);
   if(!Add(m_CloseAllBtn))
      return(false);
//--- succeed
   return(true);
  }
  
//+------------------------------------------------------------------+
//| Create the "CalculateRisk" button                                |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateCalculateRiskBtn(void)
  {
//--- coordinates
   int x1=INDENT_LEFT+2*(BUTTON_WIDTH+CONTROLS_GAP_X);
   int y1=INDENT_TOP+4*(EDIT_HEIGHT+CONTROLS_GAP_Y);
   int x2=x1+BUTTON_WIDTH;
   int y2=y1+BUTTON_HEIGHT;
//--- create
   if(!m_CalculateRiskBtn.Create(m_chart_id,m_name+"CalculateRiskBtn",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_CalculateRiskBtn.Text("Calc Risk"))
      return(false);
   if(!Add(m_CalculateRiskBtn))
      return(false);  
//--- succeed
   return(true);
  }

//+------------------------------------------------------------------+
//| Create the "ClearInputs" button                                  |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateClearInputsBtn(void)
  {
//--- coordinates
   int x1=INDENT_LEFT+(BUTTON_WIDTH+CONTROLS_GAP_X);
   int y1=INDENT_TOP+4*(EDIT_HEIGHT+CONTROLS_GAP_Y);
   int x2=x1+BUTTON_WIDTH;
   int y2=y1+BUTTON_HEIGHT;
//--- create
   if(!m_ClearInputsBtn.Create(m_chart_id,m_name+"ClearInputsBtn",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_ClearInputsBtn.Text("Clear Inputs"))
      return(false);
   if(!Add(m_ClearInputsBtn))
      return(false);
//--- succeed
   return(true);
  }

//+------------------------------------------------------------------+
//| Create the "Break Even"  button                                  |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateBreakEvenBtn(void)
  {
//--- coordinates
   int x1=INDENT_LEFT;
   int y1=INDENT_TOP+4*(EDIT_HEIGHT+CONTROLS_GAP_Y);
   int x2=x1+BUTTON_WIDTH;
   int y2=y1+BUTTON_HEIGHT;
//--- create
   if(!m_BreakEvenBtn.Create(m_chart_id,m_name+"BreakEvenBtn",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_BreakEvenBtn.Text("Break Even All"))
      return(false);
   if(!Add(m_BreakEvenBtn))
      return(false);  
//--- succeed
   return(true);
  }
  
  
//+------------------------------------------------------------------+
//| Create the "Market Pending"  button                              |
//+------------------------------------------------------------------+
bool CControlsDialog::CreateMarketPendingBtn(void)
  {
//--- coordinates
   int x1=INDENT_LEFT;
   int y1=INDENT_TOP+2*(EDIT_HEIGHT+CONTROLS_GAP_Y);
   int x2=x1+BUTTON_WIDTH;
   int y2=y1+BUTTON_HEIGHT;
//--- create
   if(!m_MarketPendingBtn.Create(m_chart_id,m_name+"MarketPending",m_subwin,x1,y1,x2,y2))
      return(false);
   if(!m_MarketPendingBtn.Text("Market"))
      return(false);
   if(!Add(m_MarketPendingBtn))
      return(false);  
//--- succeed
   return(true);
  }


//+------------------------------------------------------------------+
//| Event handler for Sell Button                                    |
//+------------------------------------------------------------------+
void CControlsDialog::OnClickSellBtn(void)
  {   
    CTrade trade;
    
    if(m_LotsEdit.Text() != "" && m_SlPipsEdit.Text() != "" && m_RiskToRewardRatioEdit.Text() != "")
        {         
          posLots = NormalizeDouble(StringToDouble(m_LotsEdit.Text()),2);        
          slPips = NormalizeDouble(StringToDouble(m_SlPipsEdit.Text()),2);
          RiskToReward = NormalizeDouble(StringToDouble(m_RiskToRewardRatioEdit.Text()),2);         
          
          ask = SymbolInfoDouble(_Symbol,SYMBOL_ASK);
          bid = SymbolInfoDouble(_Symbol,SYMBOL_BID);   
   
          slSell = NormalizeDouble(bid + slPips*_Point*10,4);
          slBuy = NormalizeDouble(ask - slPips*_Point*10,4);
      
          tpSell = NormalizeDouble(bid - RiskToReward * (slSell - bid),4);
          tpBuy = NormalizeDouble(ask + RiskToReward * (ask - slBuy),4);
                                
          Print("Lots = ",posLots," SL pips = ",slPips," RRR = ",RiskToReward, " SL Buy = ",slBuy, " Ask = ",ask," Ask - SL Buy = ",NormalizeDouble(ask-slBuy,4),
          " TP = ", tpBuy, " TP - ask = ",NormalizeDouble(tpBuy - ask,4));
          
             if(posLots > 0 && slPips > 0 && RiskToReward > 0)
               {
                  if(trade.Sell(posLots,_Symbol,bid,slSell,tpSell,"This is a SELL trade"))
                     {
                      Print("Sold ",posLots," Lots of ",_Symbol," @ ",bid," SL = ",slSell, " TP = ",tpSell);
                     }    
                } else
                   
                {
                   Print("Incorrect input");                   
                }
        
        } else
            {
              Print("Not enough input");             
            }

   Comment(__FUNCTION__);
  }
//+------------------------------------------------------------------+
//| Event handler for Buy Button                                     |
//+------------------------------------------------------------------+
void CControlsDialog::OnClickBuyBtn(void)
  {  
    CTrade trade;
    
    if(m_LotsEdit.Text() != "" && m_SlPipsEdit.Text() != "" && m_RiskToRewardRatioEdit.Text() != "")
        {         
          posLots = NormalizeDouble(StringToDouble(m_LotsEdit.Text()),2);        
          slPips = NormalizeDouble(StringToDouble(m_SlPipsEdit.Text()),2);
          RiskToReward = NormalizeDouble(StringToDouble(m_RiskToRewardRatioEdit.Text()),2);         
          
          ask = SymbolInfoDouble(_Symbol,SYMBOL_ASK);
          bid = SymbolInfoDouble(_Symbol,SYMBOL_BID);   
   
          slSell = NormalizeDouble(bid + slPips*_Point*10,4);
          slBuy = NormalizeDouble(ask - slPips*_Point*10,4);
      
          tpSell = NormalizeDouble(bid - RiskToReward * (slSell - bid),4);
          tpBuy = NormalizeDouble(ask + RiskToReward * (ask - slBuy),4);
                                
          Print("Lots = ",posLots," SL pips = ",slPips," RRR = ",RiskToReward, " SL Buy = ",slBuy, " Ask = ",ask," Ask - SL Buy = ",NormalizeDouble(ask-slBuy,4),
          " TP = ", tpBuy, " TP - ask = ",NormalizeDouble(tpBuy - ask,4));
          
             if(posLots > 0 && slPips > 0 && RiskToReward > 0)
               {
                 if(trade.Buy(posLots,_Symbol,ask,slBuy,tpBuy,"This is a BUY trade"))
                   {
                     Print("Bought ",posLots," Lots of ",_Symbol," @ ",ask," SL = ",slBuy, " TP = ",tpBuy);
                   } 
               } else
                   
                {
                   Print("Incorrect input");                   
                }
        
        } else
            {
              Print("Not enough input");             
            }
            
   Comment(__FUNCTION__);            
  }
  

//+------------------------------------------------------------------+
//| Event handler for Close All Positions Button                     |
//+------------------------------------------------------------------+
void CControlsDialog::OnClickCloseAllBtn(void)
  {
  CTrade trade;
   for(int i = PositionsTotal() - 1; i>=0;i--)
      {                      
         ulong posTicket = PositionGetTicket(i); 
         if(trade.PositionClose(_Symbol))
           {
            Print(i," Position #",posTicket," Was closed...");
           }                                      
       } // end of for loop      
   Comment(__FUNCTION__);
  }
  
//+------------------------------------------------------------------+
//| Event handler for Calculate Risk Button                          |     
//+------------------------------------------------------------------+
void CControlsDialog::OnClickCalculateRiskBtn(void)
  {   if(m_RiskEdit.Text() !="" && m_SlPipsEdit.Text() != "")
        {
          double percentRisk = NormalizeDouble(StringToDouble(m_RiskEdit.Text()),2);             
          double AccountBalance = NormalizeDouble(AccountInfoDouble(ACCOUNT_BALANCE),2);          
          double AmountToRisk = NormalizeDouble(AccountBalance*percentRisk/100,2);          
          double ValuePp = SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_VALUE);
          double LotsCalculated = NormalizeDouble(AmountToRisk/(StringToDouble(m_SlPipsEdit.Text())*10)/ValuePp,2);      
          string LotsCalculatedStr = DoubleToString(LotsCalculated,2);
      
            if(
               percentRisk > 0 &&
               AccountBalance > 0 &&
               AmountToRisk  > 0 &
               ValuePp > 0 &&
               LotsCalculated > 0
               )
              {
               m_LotsEdit.Text(DoubleToString(LotsCalculated,2));   
              } else
                  {
                   Print("Incorrect input");
                   //Alert("Incorrect Input");
                  }    
        } else
            {
             Print("Not enough input");
             //Alert("Not enough Input");
            }      
    
   Comment(__FUNCTION__);
  }
  

//+------------------------------------------------------------------+
//| Event handler for Clear Inputs Button                            |
//+------------------------------------------------------------------+
void CControlsDialog::OnClickClearInputsBtn(void)
  {                                    
   m_LotsEdit.Text(NULL);
   m_SlPipsEdit.Text(NULL);
   m_RiskToRewardRatioEdit.Text(NULL);
   m_RiskEdit.Text(NULL);
   Comment(__FUNCTION__);
  }

//+------------------------------------------------------------------+
//| Event handler for Break Even Button                              |
//+------------------------------------------------------------------+
void CControlsDialog::OnClickBreakEvenBtn(void)
  {
   CTrade trade;
   for(int i = PositionsTotal() - 1; i>=0;i--)
      {                      
         ulong posTicket = PositionGetTicket(i);
         string posSymbol = PositionGetSymbol(i);
         double posOpen = NormalizeDouble(PositionGetDouble(POSITION_PRICE_OPEN),4);
         double posSl = NormalizeDouble(PositionGetDouble(POSITION_SL),4);
         double posTp = NormalizeDouble(PositionGetDouble(POSITION_TP),4);
         double posCurrent = NormalizeDouble(PositionGetDouble(POSITION_PRICE_CURRENT),4);
                 
      
         if(posSymbol == _Symbol)
           {
            if((posCurrent > posOpen && posOpen > posSl) || (posCurrent < posOpen && posOpen < posSl))
              {
               trade.PositionModify(posTicket,posOpen,posTp);                             
               Print(i," Position #",posTicket," Break Even...");               
              }
           
           }                              
         
       } // end of for loop                               
   
   Print("Break Even Button clicked");       
   Comment(__FUNCTION__);
  }




//+------------------------------------------------------------------+   <<<<<<<<<<<<<<<<<<<<<<<<<<<\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//| Event handler for Market Pending Button                          |
//+------------------------------------------------------------------+
void CControlsDialog::OnClickMarketPendingBtn(void)
  {
   if(m_MarketPendingBtn.Text() == "Market")
     {
      m_MarketPendingBtn.Text("Pending");
     } else if(m_MarketPendingBtn.Text() == "Pending")
              {
               m_MarketPendingBtn.Text("Market");
              }   
   Comment(__FUNCTION__);
  }


//+------------------------------------------------------------------+
//| Global Variables                                                 |
//+------------------------------------------------------------------+
CControlsDialog ExtDialog;
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- create application dialog
   if(!ExtDialog.Create(0,"Controls",0,40,40,380,344))
      return(INIT_FAILED);
//--- run application
   ExtDialog.Run();   
//--- succeed
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//--- clear comments
   Comment("");
//--- destroy dialog
   ExtDialog.Destroy(reason);
  }
//+------------------------------------------------------------------+
//| Expert chart event function                                      |
//+------------------------------------------------------------------+
void OnChartEvent(const int id,         // event ID  
                  const long& lparam,   // event parameter of the long type
                  const double& dparam, // event parameter of the double type
                  const string& sparam) // event parameter of the string type
  {
   ExtDialog.ChartEvent(id,lparam,dparam,sparam);
  }
    
void OnTick()
  {   
   
  }  
